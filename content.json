{"meta":{"title":"韩欣宇的blog","subtitle":null,"description":null,"author":"韩欣宇","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2019-01-25T07:59:21.000Z","updated":"2019-01-25T07:59:21.377Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"rpc协议","slug":"rpc协议","date":"2019-02-13T07:37:41.000Z","updated":"2019-02-13T08:18:28.076Z","comments":true,"path":"2019/02/13/rpc协议/","link":"","permalink":"http://yoursite.com/2019/02/13/rpc协议/","excerpt":"","text":"RPC协议的定义RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内应用程序更加容易。 简单的说，RPC就是从一台机器（客户端）上通过参数传递的方式调用另一台机器（服务器） 上的一个函数或方法（可以统称为服务）并得到返回的结果 RPC 会隐藏底层的通讯细节（不需要直接处理Socket通讯或Http通讯） RPC 是一个请求响应模型。客户端发起请求，服务器返回响应（类似于Http的工作方式） RPC 在使用形式上像调用本地函数（或方法）一样去调用远程的函数（或方法）。 RPC协议的请求报文格式 XID 这是一个RPC报文的编号，每次递增1。 Message Type 这是RPC报文的类型。RPC报文分为两种：请求消息用0表示，应答消息用1表示。 RPC Version 这是RPC协议本身的版本编号，目前通用的是版本2。 Program 这是RPC程序编号。比如请求的是NFS服务，则这个字段为100003。 Version 这是RPC程序版本。比如请求的是NFSV2，则这个字段为2。 Procedure 这是RPC例程编号。比如请求删除一个文件，则这个字段为10。 Credentials 这是包含了用户信息，供服务器进行验证。 Verifier 这是认证信息的验证值，这个字段也跟认证方式有关。RPC应答报文格式 XID 这是RPC报文的编号，取值与请求报文中的XID一致，客户端靠这个字段分配应答消息对应哪次RPC请求。 Message Type RPC消息类型，这里取值为1，表示应答消息。 Reply State 是一个应答标志。当服务器端接收到RPC请求后会对报文格式进行检查，如果格式正确，是一个有效的RPC请求，则将Reply State设置为0，表示格式正确。 Verifier 服务器端会解析RPC请求消息中的用户信息，对用户进行验证，根据结果填写Verifier字段，这个字段中包含了身份验证后的信息，这个字段和认证类型有关。 Accept State 这个字段表示服务器是否可以处理一个RPC请求，假如服务器不支持NFS服务，那么当接收到一个Program为100003的RPC消息后，就会拒绝这个请求。如果服务器中包含RPC消息中请求的处理程序，则接收这个请求。0表示接收请求，其他值表示不接收请求。 RPC工作过程 服务消费方（client）调用以本地调用方式调用服务； client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体； client stub找到服务地址，并将消息发送到服务端； server stub收到消息后进行解码； server stub根据解码结果调用本地的服务； 本地服务执行并将结果返回给server stub； server stub将返回结果打包成消息并发送至消费方； client stub接收到消息，并进行解码； 服务消费方得到最终结果。 net/rpcGo官方提供了一个RPC库: net/rpc。包rpc提供了通过网络访问一个对象的方法的能力。服务器需要注册对象，通过对象的类型名暴露这个服务。注册后这个对象的输出方法就可以远程调用，这个库封装了底层传输的细节，包括序列化。服务器可以注册多个不同类型的对象，但是注册相同类型的多个对象的时候回出错。 声明服务1func (t *T) MethodName(argType T1, replyType *T2) error 调用服务1err = client.Call(&quot;T.MethodName&quot;, T1, &amp;T2)","categories":[],"tags":[]},{"title":"java.md","slug":"java-md","date":"2019-02-12T07:11:41.000Z","updated":"2019-02-13T08:42:40.046Z","comments":true,"path":"2019/02/12/java-md/","link":"","permalink":"http://yoursite.com/2019/02/12/java-md/","excerpt":"","text":".,,: ,. .-:++++XXXXXX .,:+++XXXXXXXXXXX .++:++XXXXXXXXXX@XX .++:+++XXX+++X+XXXXXXX ,+::+:::.-----++++XXXX .-::+ .-&apos; .XX@++X@ .,:::| .-. |+@X+XXM ,:-:| .-&apos; |+XX+XXM ==-::\\ _. &apos;.X+XXX@ -:+:::\\ |XXX@X@ ..:+++:\\ --&apos; .XXXX@X@M .:+:++&apos;.____.|+XXX@@@@MMM ,-:+:+\\ \\+X++:+++XXM ____=:++++/ |-,,/ :\\ . /-. /,/ :: - |-| /-/ |; &apos; |-| /-:&apos; |: | |-| &apos; /==/ |: /“\\ |/ ; ,,–/ /. /\\ : _..’ .-‘-:/ /: /\\ ‘.–=-‘—-‘.,-:/ /:. | -,.-==-=—-=-=/ /:. |- ‘_-====-=–/ /+|| . “-,–’.- /++.| ‘. / / /:+. . ‘.. .’ ‘.–’++. ‘. ‘—–’ -/X@| ‘._ . -/X@M| ‘’’——.___..-‘+MMM| |…,,-,,, ‘-====:+@MM| mga","categories":[],"tags":[]},{"title":"","slug":"java初级","date":"2019-02-12T06:57:24.758Z","updated":"2019-02-13T08:43:49.138Z","comments":true,"path":"2019/02/12/java初级/","link":"","permalink":"http://yoursite.com/2019/02/12/java初级/","excerpt":"","text":"java…………HIIMHIMHMMHMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM:………….………..MMMI:MII:MIHMHMMMMMHMMMMIMMMIMMMMMMMMMMMMMM………….………:MMMI:M::HM::MIHHHM:IM:MHM:IMH:IMMMIIMMMHMMMH:………………..:MMMHHM::MMI:HH:MM:I:M:MMMH:IMH:IMM::MH:MM:MM:M……………….MMMMHMM:MMIMHMII:MM:IIIM:MHMIMMM:MMIIH::MH:HM:M……………… :MIMMMMMMMMMHMMHMM:HHMHMMMMIMHMMMMHMHMIHIHM::MMI……………….M:MMMMMMMMMMMMHMMMMMMMMHMMMMMMMMMMHMMMHMMIMHMMMM:………..…….HHMMMMMMMMMMMMMMMMIMMMM.MMHMMMMHMMMMMMMMMMMIMHMMI………..……..MMMIMMMMMMMMMMIHMIMIM:.M:HMM:MIHMMMMMMMMMMMMMMMI………..……..MM.MMMMMMMMMMMH:MMMHM:.M.:MM.M.HMMMHMMMMMMMMMMMI………..……..MM.MMMMMMMMMMH::M.M.M..M..MM:M.IIMH:MMMMMMMMMMMI………..……..M:.MM:MMMMMMM:.I..:.I..H..IM:I.I.M.IMHMMMMMMMMMI………..……..M..MMMHMMMMM.:HI:HHH……H….II..:MMMMMMMHMM:………..………..MM.MIMMMM.:H: .::I…….. …:IH:.MMMMMM:MMI………..………..:H..MMMIM.M.:…:I………: ..::HHHMMMMIMMMH………..…………H..IMM:I:..I:..:……….I:..:I:::MMMMMMMMM………..……………MMH::I…I:::……….III.I::MMMHMMMMMMM………..…………..MMMHMII.. …………..:MI:I.HIIIHM:HMMMM………..………….:MMMMIM::………..:……:H..:II:MHIMMMMM………..………….MMMMMMMMM………………….I.MMMHHMMMMM:……….…………MMMMH:MMMMM……..:.:………:MMMMMMMMMMMMI……….………..MMMMMMHMMMMMMM.. ………….:MMMMMMMMMMMMMMM……….…….. .IMMMMMMMMMMMMMMMM…………:MMMMMMMMMHMMMMMMM……….……….MMMMMMMMMMMMMMMMMI:…….:IHMMMMMMMMM::MMMMMMM……….………MMMMMMMIMMMMMMMMMMH:::I:I:.::HMMMMMMMMMHMMMMMMMMI……………..HMMMMMMM:MMMMMMMMMMI:::::::..:HMMMMMMMMIMMMMMMMMMM…………….IMMMMM..MI:MMMMMMMMM::::..:::::.MMMMMMMMMMMMMMMMMMM ……..……:MMMM….:MMHMMMMMM:::::…..::.:.MMMMMMMHMMMMMMMMMM……………MMI….:::IMMMMI:.:::::…..:I::::::HMMMHIM::::::MMMH……..…..MM…..:::IMIMMM:…….:….::::::::IMMHMM:I:::I:::MM …….….MMM…..:I:.MIHMMM……..:…:::::::HMMMMI:::::….::M:…….…:MM:……..:MMMHMM………………IMMMMM::………..M…….…MMM……..:::MMMMM……:……….:HMMMMM::………………...:MM:…….:::::MMMM……….. .. .::MMM:HM::………….:…....MMM……..:::::MMMMM:I..HHIMHMHHHM :IMMHIMH::………….I…..","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-01-23T08:06:02.542Z","updated":"2019-01-23T08:06:02.542Z","comments":true,"path":"2019/01/23/hello-world/","link":"","permalink":"http://yoursite.com/2019/01/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"go基本语法","slug":"golang","date":"2018-07-30T07:11:41.000Z","updated":"2019-02-13T07:39:01.113Z","comments":true,"path":"2018/07/30/golang/","link":"","permalink":"http://yoursite.com/2018/07/30/golang/","excerpt":"","text":"golang1. 特征 简明扼要，开发效率高。 编译型语言执行速度快。 有先进的并发支持模型。 可以全自动地垃圾回收。 自带工具强制编码风格。 强大的标准库应用广泛。 2. 变量 变量是一个或多个存储数据的内存 声明变量 可以用var关键字，也可以使用精简写法,例如下面:123var x inty := 1x=y","categories":[],"tags":[]}]}